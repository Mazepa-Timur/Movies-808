{"ast":null,"code":"import { userDataAction } from '../reducers/userStore';\nimport { Cookies } from \"react-cookie\";\nconst cookies = new Cookies();\nconst RegExpEmail = new RegExp('[a-zA-Z0-9]@.');\nconst RegExpGmail = new RegExp(/^[A-Z0-9._%+-]+@gmail.com$/i);\nconst RegExpPassword = new RegExp('^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})');\nexport const setUserAction = (data, typeForm) => {\n  return async dispatch => {\n    try {\n      if (Object.keys(data).length) {\n        let errorList = [];\n        if (!RegExpEmail.test(data.email)) {\n          errorList.push({\n            errorType: 'errorText',\n            message: `incorrect email`\n          });\n        }\n        if (!RegExpPassword.test(data.password)) {\n          errorList.push({\n            errorType: 'errorText',\n            message: `incorrect password`\n          });\n        }\n        dispatch(userDataAction.setLoginError(errorList));\n        if (!errorList.length) {\n          console.log(111, data);\n          if (!typeForm) {}\n          if (typeForm) {\n            const response = await fetch('http://localhost:8008/user/login', {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify(data)\n            });\n            const res = await response.json();\n            if (response.ok) {\n              cookies.set('access_token', res.access_token);\n              cookies.set('refresh_token', res.refresh_token);\n              dispatch(userDataAction.setUserData(res));\n              console.log('hi-yes', res);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  };\n};","map":{"version":3,"names":["userDataAction","Cookies","cookies","RegExpEmail","RegExp","RegExpGmail","RegExpPassword","setUserAction","data","typeForm","dispatch","Object","keys","length","errorList","test","email","push","errorType","message","password","setLoginError","console","log","response","fetch","method","headers","body","JSON","stringify","res","json","ok","set","access_token","refresh_token","setUserData","error"],"sources":["S:/Code/Hi_808_V2/front-end-update/src/store/actions/userAction.js"],"sourcesContent":["import { userDataAction } from '../reducers/userStore';\r\nimport { Cookies } from \"react-cookie\";\r\nconst cookies = new Cookies();\r\n\r\nconst RegExpEmail = new RegExp('[a-zA-Z0-9]@.');\r\nconst RegExpGmail = new RegExp(/^[A-Z0-9._%+-]+@gmail.com$/i);\r\nconst RegExpPassword = new RegExp(\r\n  '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.*[!@#$%^&*])(?=.{8,})'\r\n);\r\n\r\nexport const setUserAction = (data, typeForm) => {\r\n  return async (dispatch) => {\r\n    try {\r\n      if (Object.keys(data).length) {\r\n        let errorList = [];\r\n        if (!RegExpEmail.test(data.email)) {\r\n          errorList.push({\r\n            errorType: 'errorText',\r\n            message: `incorrect email`,\r\n          });\r\n        }\r\n        if (!RegExpPassword.test(data.password)) {\r\n          errorList.push({\r\n            errorType: 'errorText',\r\n            message: `incorrect password`,\r\n          });\r\n        }\r\n        dispatch(userDataAction.setLoginError(errorList));\r\n\r\n        if (!errorList.length) {\r\n          console.log(111, data);\r\n\r\n          if (!typeForm) {\r\n            \r\n          }\r\n          if (typeForm) {\r\n            const response = await fetch('http://localhost:8008/user/login', {\r\n              method: 'POST',\r\n              headers: { 'Content-Type': 'application/json' },\r\n              body: JSON.stringify(data),\r\n            });\r\n            const res = await response.json();\r\n            if (response.ok) {\r\n              cookies.set('access_token', res.access_token);\r\n              cookies.set('refresh_token', res.refresh_token);\r\n              dispatch(userDataAction.setUserData(res));\r\n              console.log('hi-yes', res);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error;\r\n    }\r\n  };\r\n};\r\n"],"mappings":"AAAA,SAASA,cAAc,QAAQ,uBAAuB;AACtD,SAASC,OAAO,QAAQ,cAAc;AACtC,MAAMC,OAAO,GAAG,IAAID,OAAO,CAAC,CAAC;AAE7B,MAAME,WAAW,GAAG,IAAIC,MAAM,CAAC,eAAe,CAAC;AAC/C,MAAMC,WAAW,GAAG,IAAID,MAAM,CAAC,6BAA6B,CAAC;AAC7D,MAAME,cAAc,GAAG,IAAIF,MAAM,CAC/B,6DACF,CAAC;AAED,OAAO,MAAMG,aAAa,GAAGA,CAACC,IAAI,EAAEC,QAAQ,KAAK;EAC/C,OAAO,MAAOC,QAAQ,IAAK;IACzB,IAAI;MACF,IAAIC,MAAM,CAACC,IAAI,CAACJ,IAAI,CAAC,CAACK,MAAM,EAAE;QAC5B,IAAIC,SAAS,GAAG,EAAE;QAClB,IAAI,CAACX,WAAW,CAACY,IAAI,CAACP,IAAI,CAACQ,KAAK,CAAC,EAAE;UACjCF,SAAS,CAACG,IAAI,CAAC;YACbC,SAAS,EAAE,WAAW;YACtBC,OAAO,EAAG;UACZ,CAAC,CAAC;QACJ;QACA,IAAI,CAACb,cAAc,CAACS,IAAI,CAACP,IAAI,CAACY,QAAQ,CAAC,EAAE;UACvCN,SAAS,CAACG,IAAI,CAAC;YACbC,SAAS,EAAE,WAAW;YACtBC,OAAO,EAAG;UACZ,CAAC,CAAC;QACJ;QACAT,QAAQ,CAACV,cAAc,CAACqB,aAAa,CAACP,SAAS,CAAC,CAAC;QAEjD,IAAI,CAACA,SAAS,CAACD,MAAM,EAAE;UACrBS,OAAO,CAACC,GAAG,CAAC,GAAG,EAAEf,IAAI,CAAC;UAEtB,IAAI,CAACC,QAAQ,EAAE,CAEf;UACA,IAAIA,QAAQ,EAAE;YACZ,MAAMe,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;cAC/DC,MAAM,EAAE,MAAM;cACdC,OAAO,EAAE;gBAAE,cAAc,EAAE;cAAmB,CAAC;cAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACtB,IAAI;YAC3B,CAAC,CAAC;YACF,MAAMuB,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;YACjC,IAAIR,QAAQ,CAACS,EAAE,EAAE;cACf/B,OAAO,CAACgC,GAAG,CAAC,cAAc,EAAEH,GAAG,CAACI,YAAY,CAAC;cAC7CjC,OAAO,CAACgC,GAAG,CAAC,eAAe,EAAEH,GAAG,CAACK,aAAa,CAAC;cAC/C1B,QAAQ,CAACV,cAAc,CAACqC,WAAW,CAACN,GAAG,CAAC,CAAC;cACzCT,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEQ,GAAG,CAAC;YAC5B;UACF;QACF;MACF;IACF,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdhB,OAAO,CAACgB,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}