{"ast":null,"code":"import { Cookies } from \"react-cookie\";\nconst cookies = new Cookies();\nconst API = {\n  register: async request => {\n    try {\n      const response = await fetch('http://localhost:8008/user/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        throw res.message;\n      } else {\n        return 'USER CREATE';\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  },\n  login: async request => {\n    try {\n      const response = await fetch('http://localhost:8008/user/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        throw res.message;\n      } else {\n        cookies.set('access_token', res.access_token);\n        cookies.set('refresh_token', res.refresh_token);\n        return res.user;\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  },\n  authorization: async () => {\n    try {\n      const response = await fetch('http://localhost:8008/user/authorization', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': cookies.get('access_token')\n        },\n        body: ''\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        throw res.message;\n      } else {\n        return res.user;\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  },\n  updateToken: async () => {\n    try {\n      const response = await fetch('http://localhost:8008/user/updateToken', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          refresh_token: cookies.get('refresh_token')\n        })\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        cookies.remove('access_token');\n        cookies.remove('refresh_token');\n        throw res.message;\n      } else {\n        cookies.set('access_token', res.access_token);\n        cookies.set('refresh_token', res.refresh_token);\n        return res.user;\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  },\n  forgotPassword: async email => {\n    try {\n      const response = await fetch('http://localhost:8008/user/forgotPassword', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email: email\n        })\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        throw res.message;\n      } else {\n        cookies.set('action_tokin', res.token);\n        return res;\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  },\n  changePassword: async password => {\n    try {\n      const response = await fetch('http://localhost:8008/user/changePassword', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          password: password,\n          token: cookies.get('action_tokin')\n        })\n      });\n      const res = await response.json();\n      if (response.ok === false) {\n        throw res.message;\n      } else {\n        return res;\n      }\n    } catch (error) {\n      console.error('hi-808: ', error);\n      return error;\n    }\n  }\n};\nexport default API;","map":{"version":3,"names":["Cookies","cookies","API","register","request","response","fetch","method","headers","body","JSON","stringify","res","json","ok","message","error","console","login","set","access_token","refresh_token","user","authorization","get","updateToken","remove","forgotPassword","email","token","changePassword","password"],"sources":["T:/8 VS Code/Hi_808_V2/front-end/src/components/Database/authorization.js"],"sourcesContent":["import { Cookies } from \"react-cookie\";\r\nconst cookies = new Cookies();\r\nconst API = {\r\n  register: async (request) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(request),\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        throw res.message\r\n      } else {\r\n        return 'USER CREATE';\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  },\r\n  login: async (request) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(request),\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        throw res.message\r\n      } else {\r\n        cookies.set('access_token', res.access_token);\r\n        cookies.set('refresh_token', res.refresh_token);\r\n        return res.user\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  },\r\n  authorization: async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/authorization', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          'Authorization': cookies.get('access_token')\r\n        },\r\n        body: ''\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        throw res.message\r\n      } else {\r\n        return res.user\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  },\r\n  updateToken: async () => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/updateToken', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({refresh_token: cookies.get('refresh_token')})\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        cookies.remove('access_token');\r\n        cookies.remove('refresh_token');\r\n        throw res.message\r\n      } else {\r\n        cookies.set('access_token', res.access_token);\r\n        cookies.set('refresh_token', res.refresh_token);\r\n        return res.user\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  },\r\n  forgotPassword: async (email) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/forgotPassword', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({email: email})\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        throw res.message\r\n      } else {\r\n        cookies.set('action_tokin', res.token)\r\n        return res\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  },\r\n  changePassword: async (password) => {\r\n    try {\r\n      const response = await fetch('http://localhost:8008/user/changePassword', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({password: password, token: cookies.get('action_tokin')})\r\n      })\r\n      const res = await response.json();\r\n      if (response.ok === false) {\r\n        throw res.message\r\n      } else {\r\n        return res\r\n      }\r\n    } catch (error) {\r\n      console.error('hi-808: ', error);\r\n      return error\r\n    }\r\n  }\r\n};\r\n\r\nexport default API;\r\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,cAAc;AACtC,MAAMC,OAAO,GAAG,IAAID,OAAO,CAAC,CAAC;AAC7B,MAAME,GAAG,GAAG;EACVC,QAAQ,EAAE,MAAOC,OAAO,IAAK;IAC3B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,EAAE;QAClEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MACF,MAAMQ,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMF,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACL,OAAO,aAAa;MACtB;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;EACDE,KAAK,EAAE,MAAOd,OAAO,IAAK;IACxB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;QAC/DC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACP,OAAO;MAC9B,CAAC,CAAC;MACF,MAAMQ,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMF,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACLd,OAAO,CAACkB,GAAG,CAAC,cAAc,EAAEP,GAAG,CAACQ,YAAY,CAAC;QAC7CnB,OAAO,CAACkB,GAAG,CAAC,eAAe,EAAEP,GAAG,CAACS,aAAa,CAAC;QAC/C,OAAOT,GAAG,CAACU,IAAI;MACjB;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;EACDO,aAAa,EAAE,MAAAA,CAAA,KAAY;IACzB,IAAI;MACF,MAAMlB,QAAQ,GAAG,MAAMC,KAAK,CAAC,0CAA0C,EAAE;QACvEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClC,eAAe,EAAEP,OAAO,CAACuB,GAAG,CAAC,cAAc;QAC7C,CAAC;QACDf,IAAI,EAAE;MACR,CAAC,CAAC;MACF,MAAMG,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMF,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACL,OAAOH,GAAG,CAACU,IAAI;MACjB;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;EACDS,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,wCAAwC,EAAE;QACrEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACU,aAAa,EAAEpB,OAAO,CAACuB,GAAG,CAAC,eAAe;QAAC,CAAC;MACpE,CAAC,CAAC;MACF,MAAMZ,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzBb,OAAO,CAACyB,MAAM,CAAC,cAAc,CAAC;QAC9BzB,OAAO,CAACyB,MAAM,CAAC,eAAe,CAAC;QAC/B,MAAMd,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACLd,OAAO,CAACkB,GAAG,CAAC,cAAc,EAAEP,GAAG,CAACQ,YAAY,CAAC;QAC7CnB,OAAO,CAACkB,GAAG,CAAC,eAAe,EAAEP,GAAG,CAACS,aAAa,CAAC;QAC/C,OAAOT,GAAG,CAACU,IAAI;MACjB;IACF,CAAC,CAAC,OAAON,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;EACDW,cAAc,EAAE,MAAOC,KAAK,IAAK;IAC/B,IAAI;MACF,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACiB,KAAK,EAAEA;QAAK,CAAC;MACrC,CAAC,CAAC;MACF,MAAMhB,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMF,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACLd,OAAO,CAACkB,GAAG,CAAC,cAAc,EAAEP,GAAG,CAACiB,KAAK,CAAC;QACtC,OAAOjB,GAAG;MACZ;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF,CAAC;EACDc,cAAc,EAAE,MAAOC,QAAQ,IAAK;IAClC,IAAI;MACF,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,2CAA2C,EAAE;QACxEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UAACoB,QAAQ,EAAEA,QAAQ;UAAEF,KAAK,EAAE5B,OAAO,CAACuB,GAAG,CAAC,cAAc;QAAC,CAAC;MAC/E,CAAC,CAAC;MACF,MAAMZ,GAAG,GAAG,MAAMP,QAAQ,CAACQ,IAAI,CAAC,CAAC;MACjC,IAAIR,QAAQ,CAACS,EAAE,KAAK,KAAK,EAAE;QACzB,MAAMF,GAAG,CAACG,OAAO;MACnB,CAAC,MAAM;QACL,OAAOH,GAAG;MACZ;IACF,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,UAAU,EAAEA,KAAK,CAAC;MAChC,OAAOA,KAAK;IACd;EACF;AACF,CAAC;AAED,eAAed,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}